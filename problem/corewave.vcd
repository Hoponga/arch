$date
	Mon Aug  7 15:00:38 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module core $end
$var wire 1 ! clk $end
$var wire 32 " inst [31:0] $end
$var wire 1 # inst_excpt $end
$var wire 1 $ internal_halt $end
$var wire 30 % mem_addr [29:0] $end
$var wire 32 & mem_data_in [31:0] $end
$var wire 32 ' mem_data_out [31:0] $end
$var wire 1 ( mem_excpt $end
$var wire 4 ) mem_write_en [3:0] $end
$var wire 32 * r_v0 [31:0] $end
$var wire 32 + rs_data [31:0] $end
$var wire 1 , rst_b $end
$var wire 1 - syscall_halt $end
$var wire 32 . pc [31:0] $end
$var wire 32 / nextpc [31:0] $end
$var wire 32 0 nextnextpc [31:0] $end
$var wire 1 1 load_ex_regs $end
$var wire 1 2 load_bva_sel $end
$var wire 1 3 load_bva $end
$var wire 30 4 inst_addr [29:0] $end
$var wire 1 5 halted $end
$var wire 1 6 exception_halt $end
$var wire 32 7 epc [31:0] $end
$var wire 26 8 dcd_target [25:0] $end
$var wire 5 9 dcd_shamt [4:0] $end
$var wire 32 : dcd_se_offset [31:0] $end
$var wire 32 ; dcd_se_mem_offset [31:0] $end
$var wire 32 < dcd_se_imm [31:0] $end
$var wire 5 = dcd_rt [4:0] $end
$var wire 5 > dcd_rs [4:0] $end
$var wire 5 ? dcd_rd [4:0] $end
$var wire 6 @ dcd_op [5:0] $end
$var wire 16 A dcd_offset [15:0] $end
$var wire 16 B dcd_imm [15:0] $end
$var wire 6 C dcd_funct2 [5:0] $end
$var wire 5 D dcd_funct1 [4:0] $end
$var wire 32 E dcd_e_imm [31:0] $end
$var wire 20 F dcd_code [19:0] $end
$var wire 1 G dcd_bczft $end
$var wire 1 H ctrl_we $end
$var wire 1 I ctrl_Sys $end
$var wire 1 J ctrl_RI $end
$var wire 5 K cause_code [4:0] $end
$var wire 32 L cause [31:0] $end
$var wire 32 M bad_v_addr [31:0] $end
$var wire 4 N alu__sel [3:0] $end
$var wire 32 O alu__out [31:0] $end
$scope module ALU $end
$var wire 32 P alu__op1 [31:0] $end
$var wire 32 Q alu__op2 [31:0] $end
$var wire 4 R alu__sel [3:0] $end
$var wire 32 S alu__out [31:0] $end
$scope module AdderUnit $end
$var wire 32 T in1 [31:0] $end
$var wire 32 U in2 [31:0] $end
$var wire 1 V sub $end
$var wire 32 W out [31:0] $end
$upscope $end
$upscope $end
$scope module BadVAddrReg $end
$var wire 1 ! clk $end
$var wire 1 , rst_b $end
$var wire 1 3 enable $end
$var wire 32 X d [31:0] $end
$var reg 32 Y q [31:0] $end
$upscope $end
$scope module CauseReg $end
$var wire 1 ! clk $end
$var wire 32 Z d [31:0] $end
$var wire 1 , rst_b $end
$var wire 1 1 enable $end
$var reg 32 [ q [31:0] $end
$upscope $end
$scope module Decoder $end
$var wire 6 \ dcd_funct2 [5:0] $end
$var wire 6 ] dcd_op [5:0] $end
$var reg 4 ^ alu__sel [3:0] $end
$var reg 1 J ctrl_RI $end
$var reg 1 I ctrl_Sys $end
$var reg 1 H ctrl_we $end
$upscope $end
$scope module EPCReg $end
$var wire 1 ! clk $end
$var wire 1 , rst_b $end
$var wire 1 1 enable $end
$var wire 32 _ d [31:0] $end
$var reg 32 ` q [31:0] $end
$upscope $end
$scope module EU $end
$var wire 1 a AdEL_data $end
$var wire 1 b AdEL_inst $end
$var wire 1 c AdES $end
$var wire 1 d BP $end
$var wire 1 e CpU $end
$var wire 1 f DBE $end
$var wire 1 # IBE $end
$var wire 1 g Ov $end
$var wire 1 J RI $end
$var wire 1 ! clk $end
$var wire 1 6 exception_halt $end
$var wire 1 3 load_bva $end
$var wire 1 2 load_bva_sel $end
$var wire 1 1 load_ex_regs $end
$var wire 1 , rst_b $end
$var wire 32 h pc [31:0] $end
$var reg 5 i cause [4:0] $end
$upscope $end
$scope module Halt $end
$var wire 1 ! clk $end
$var wire 1 $ d $end
$var wire 1 j enable $end
$var wire 1 , rst_b $end
$var reg 1 5 q $end
$upscope $end
$scope module NextPCAdder $end
$var wire 32 k out [31:0] $end
$var wire 32 l in [31:0] $end
$upscope $end
$scope module PCReg $end
$var wire 1 ! clk $end
$var wire 1 m enable $end
$var wire 1 , rst_b $end
$var wire 32 n d [31:0] $end
$var reg 32 o q [31:0] $end
$upscope $end
$scope module PCReg2 $end
$var wire 1 ! clk $end
$var wire 32 p d [31:0] $end
$var wire 1 q enable $end
$var wire 1 , rst_b $end
$var reg 32 r q [31:0] $end
$upscope $end
$scope module SU $end
$var wire 1 I Sys $end
$var wire 1 ! clk $end
$var wire 32 s pc [31:0] $end
$var wire 32 t r_v0 [31:0] $end
$var wire 1 , rst_b $end
$var wire 1 - syscall_halt $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1010 t
bx s
bx r
xq
bx p
bx o
bx n
xm
bx l
bx k
1j
b110 i
bx h
0g
0f
0e
0d
0c
xb
0a
bx `
bx _
bx ^
bx ]
bx \
bx [
b11000 Z
bx Y
bx X
bx W
xV
bx U
bz T
bx S
bx R
bx Q
bz P
bx O
bx N
bx M
bx L
b110 K
xJ
xI
xH
xG
bx F
b0xxxxxxxxxxxxxxxx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx00 :
bx 9
bx 8
bx 7
x6
x5
bx 4
x3
02
x1
bx 0
bx /
bx .
x-
x,
bz +
b1010 *
b0 )
1(
bx '
bx &
b0 %
x$
1#
bx "
0!
$end
